from logging import Filter, LogRecord, Logger
from typing import Dict, List, Mapping

LOGGER: Logger

class ContextFilter(Filter):
    @property
    def message_key(self) -> str: ...
    @property
    def excluded_logging_context_keys(self) -> List[str]: ...
    @excluded_logging_context_keys.setter
    def excluded_logging_context_keys(self, value: List[str]) -> None: ...
    def __init__(self, context: Dict[str, str], disable_log_formatting: bool = ..., split_threshold: int = ...) -> None: ...
    def update_context(self, new_context_dict: Mapping[str, str]) -> None: ...
    def filter(self, record: LogRecord) -> bool: ...
